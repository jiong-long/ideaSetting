<application>
  <component name="AppStorage">
    <histories>
      <item value="Component" />
      <item value="Strategy interface to handle the value returned from the invocation of a * handler method ." />
      <item value="ceil" />
      <item value="Enhancer" />
      <item value="is Terminated" />
      <item value="TERMINATED" />
      <item value="TIDYING" />
      <item value="SHUTDOWN" />
      <item value="COUNT MASK" />
      <item value="Executors" />
      <item value="if there is a queued thread preceding the * current thread, and {@code false} if the current thread * is at the head of the queue or the queue is empty" />
      <item value="The current owner of exclusive mode synchronization." />
      <item value="/* * Thread to unpark is held in successor, which is normally * just the next node. But if cancelled or apparently null, * traverse backwards from tail to find the actual * non-cancelled successor. */" />
      <item value="deserialize" />
      <item value="* Method that deserializers should call if they encounter a String value * that cannot be converted to target property type, in cases where some * String values could be acceptable (either with different settings, * or different value)." />
      <item value="division" />
      <item value="* Checks and updates status for a node that failed to acquire. * Returns true if thread should block. This is the main signal * control in all acquire loops. Requires that pred == node.prev." />
      <item value="should Park After Failed Acquire" />
      <item value="/* * This node has already set status asking a release * to signal it, so it can safely park. */" />
      <item value="exclusive" />
      <item value="EXCLUSIVE" />
      <item value="statement" />
      <item value="collapsed" />
      <item value="exclusive Logo Self" />
      <item value="专属" />
      <item value="state" />
      <item value="statue" />
      <item value="non-private to simplify nested class access" />
      <item value="is Present" />
      <item value="Method call expected" />
      <item value="negative Stock" />
      <item value="retail" />
      <item value="up-to-date" />
      <item value="All files are up-to-date" />
      <item value="ms" />
      <item value="exclusion" />
      <item value="The field annotated with {@code @Default} must have an initializing expression; that expression is taken as the default to be used if not explicitly set during building." />
      <item value="The field annotated with {@code @Default} must have an initializing expression; that expression is taken as the default to be used if not explicitly set during building" />
      <item value="Expire" />
      <item value="RETREAT" />
      <item value="INVITATION" />
      <item value="Distance Sort" />
      <item value="Function Expand" />
      <item value="Judge" />
      <item value="is Optional" />
      <item value="true if we are declaring a durable exchange (the exchange will survive a server restart)" />
      <item value="true if the 'immediate' flag is to be" />
      <item value="terms Query" />
      <item value="fuzzy Query" />
      <item value="peek" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="165" />
        <entry key="ENGLISH" value="166" />
        <entry key="PORTUGUESE" value="2" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20211207001021629" />
      </app-key>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="fanyi.baidu" />
  </component>
</application>